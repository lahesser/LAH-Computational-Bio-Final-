{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Automatic pdb calling has been turned ON\n"
     ]
    }
   ],
   "source": [
    "%pdb\n",
    "import re \n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_inflammation_stats(demographics): \n",
    "  \n",
    "    Inflammation = {}\n",
    "    with open('../Downloads/Cohort2_mappingfile.txt') as f: \n",
    "        dr = csv.DictReader(f, delimiter = '\\t')\n",
    "        for row in dr:\n",
    "            matching = True\n",
    "            for i in demographics:\n",
    "                    if row[i] != demographics[i]: \n",
    "                        matching = False\n",
    "                        break \n",
    "            if matching == True: \n",
    "                my_inflam = row['s']\n",
    "                Inflammation[my_inflam] = Inflammation.get(my_inflam, 0) + 1\n",
    "    return(Inflammation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Non_Inflamed': 56, 'Inflamed': 14}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check that it works. I want it to return the number of Inflamed and Non-Inflamed for this demographic \n",
    "get_inflammation_stats({'Gender': 'F', 'BMI_categorized': 'Normal'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "Gender = []\n",
    "BMI_category = ['Normal', 'Overweight', 'Obese']\n",
    "Inflammation_status = []\n",
    "Disease = []\n",
    "with open('../Downloads/Cohort2_mappingfile.txt') as f: \n",
    "    dr = csv.DictReader(f, delimiter = '\\t')\n",
    "    for row in dr: \n",
    "        Gender.append(row['Gender'])\n",
    "        Inflammation_status.append(row['s'])\n",
    "        Disease.append(row['Disease'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1217\n",
      "1217\n",
      "1217\n"
     ]
    }
   ],
   "source": [
    "print(len(Gender))\n",
    "print(len(Inflammation_status))\n",
    "print(len(Disease))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#we want to find the number of inflamed / not inflamed individuals in each demographic group. \n",
    "\n",
    "#desired output: {UC: {Males: {Normal: {Inflamed:#, Noninflamed: #}, \n",
    "#                              Overweight: {Inflamed:#, Noninflamed: #}, \n",
    "#                              Obese: {Inflamed:#, Noninflamed: #}}, \n",
    "#                      Females: etc. }\n",
    "\n",
    "def get_all_categories_diseases(category): \n",
    "    \n",
    "    categorized_inflammation_by_disease = {}\n",
    "    Genders = ['M', 'F']\n",
    "    disease_types = [\"UC\", \"CD\"]\n",
    "    \n",
    "    for disease in list(disease_types): \n",
    "        categorized_inflammation_by_disease[disease] = {}\n",
    "        for gender in list(Genders): \n",
    "            categorized_inflammation_by_disease[disease][gender] = {}\n",
    "            for i in list(category): \n",
    "                categorized_inflammation_by_disease[disease][gender][i] = get_inflammation_stats({'Disease': disease, \n",
    "                                                                                       'Gender': gender, \n",
    "                                                                                       'BMI_categorized': i})\n",
    "    return(categorized_inflammation_by_disease)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'UC': {'M': {'Normal': {'Non_Inflamed': 22, 'Inflamed': 10, 'Unknown': 1}, 'Overweight': {'Non_Inflamed': 29, 'Inflamed': 9}, 'Obese': {'Non_Inflamed': 14, 'Inflamed': 2}}, 'F': {'Normal': {'Non_Inflamed': 17, 'Inflamed': 6}, 'Overweight': {'Non_Inflamed': 11, 'Inflamed': 3}, 'Obese': {'Non_Inflamed': 6}}}, 'CD': {'M': {'Normal': {'Non_Inflamed': 38, 'Inflamed': 7}, 'Overweight': {'Non_Inflamed': 28, 'Inflamed': 7}, 'Obese': {'Inflamed': 3, 'Non_Inflamed': 2}}, 'F': {'Normal': {'Non_Inflamed': 33, 'Inflamed': 8}, 'Overweight': {'Non_Inflamed': 6}, 'Obese': {'Non_Inflamed': 12, 'Inflamed': 2}}}}\n"
     ]
    }
   ],
   "source": [
    "categorized_inflammation_by_disease = get_all_categories_diseases(BMI_category)\n",
    "print(categorized_inflammation_by_disease)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'UC': {'M': {'Normal': 31.2, 'Overweight': 23.7, 'Obese': 12.5}, 'F': {'Normal': 26.1, 'Overweight': 21.4, 'Obese': 0.0}}, 'CD': {'M': {'Normal': 15.6, 'Overweight': 20.0, 'Obese': 60.0}, 'F': {'Normal': 19.5, 'Overweight': 0.0, 'Obese': 14.299999999999999}}}\n",
      "No inflamed control subjects; frequency is zero for all groups\n"
     ]
    }
   ],
   "source": [
    "disease_types = [\"UC\", \"CD\"]\n",
    "Genders = ['M', 'F']           #these lists had been defined previously, but only within a function\n",
    "categorized_inflammation_by_disease = {\n",
    "    'UC': {'M': {'Normal': {'Non_Inflamed': 22, 'Inflamed': 10, 'Unknown': 1},\n",
    "   'Overweight': {'Non_Inflamed': 29, 'Inflamed': 9},\n",
    "   'Obese': {'Non_Inflamed': 14, 'Inflamed': 2}},\n",
    "  'F': {'Normal': {'Non_Inflamed': 17, 'Inflamed': 6},\n",
    "   'Overweight': {'Non_Inflamed': 11, 'Inflamed': 3},\n",
    "   'Obese': {'Non_Inflamed': 6, 'Inflamed': 0}}},           #must manually add Inflamed = 0\n",
    " 'CD': {'M': {'Normal': {'Non_Inflamed': 38, 'Inflamed': 7},\n",
    "   'Overweight': {'Non_Inflamed': 28, 'Inflamed': 7},\n",
    "   'Obese': {'Inflamed': 3, 'Non_Inflamed': 2}},\n",
    "  'F': {'Normal': {'Non_Inflamed': 33, 'Inflamed': 8},\n",
    "   'Overweight': {'Non_Inflamed': 6, 'Inflamed': 0},\n",
    "   'Obese': {'Non_Inflamed': 12, 'Inflamed': 2}}}}\n",
    "\n",
    "\n",
    "Inflam_prop_by_disease = {}\n",
    "for disease in list(disease_types): \n",
    "    Inflam_prop_by_disease[disease] = {}\n",
    "    for gender in list(Genders): \n",
    "        Inflam_prop_by_disease[disease][gender] = {}\n",
    "        for BMI in list(BMI_category): \n",
    "            Inflam_prop_by_disease[disease][gender][BMI] = round(categorized_inflammation_by_disease[disease][gender][BMI]['Inflamed'] / \n",
    "                                                (categorized_inflammation_by_disease[disease][gender][BMI]['Inflamed'] + \n",
    "                                                 categorized_inflammation_by_disease[disease][gender][BMI]['Non_Inflamed']), \n",
    "                                                    3) * 100 \n",
    "print(Inflam_prop_by_disease)\n",
    "print('No inflamed control subjects; frequency is zero for all groups')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#graph our data for inflammation proportion of different cohorts. We need to turn the dictionary \n",
    "#into a Data Frame so that the pandas can read it. \n",
    "\n",
    "import pandas as pd \n",
    "\n",
    "categorized_inflammation_UC = {'Males': {'Normal': 31.2, 'Overweight': 23.7, 'Obese': 12.5}, \n",
    "                               'Females': {'Normal': 26.1, 'Overweight': 21.4, 'Obese': 0.0}}\n",
    "categorized_inflammation_CD = {'Males': {'Normal': 15.6, 'Overweight': 20.0, 'Obese': 60.0}, \n",
    "                               'Females': {'Normal': 19.5, 'Overweight': 0.0, 'Obese': 14.3}}\n",
    "\n",
    "df = pd.concat({\"CD\": pd.DataFrame(categorized_inflammation_CD), \n",
    "                        \"UC\": pd.DataFrame(categorized_inflammation_UC)}).unstack(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">Males</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Females</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>CD</th>\n",
       "      <th>UC</th>\n",
       "      <th>CD</th>\n",
       "      <th>UC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Normal</th>\n",
       "      <td>15.6</td>\n",
       "      <td>31.2</td>\n",
       "      <td>19.5</td>\n",
       "      <td>26.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Obese</th>\n",
       "      <td>60.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>14.3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Overweight</th>\n",
       "      <td>20.0</td>\n",
       "      <td>23.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Males       Females      \n",
       "              CD    UC      CD    UC\n",
       "Normal      15.6  31.2    19.5  26.1\n",
       "Obese       60.0  12.5    14.3   0.0\n",
       "Overweight  20.0  23.7     0.0  21.4"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">Males</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Females</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>CD</th>\n",
       "      <th>UC</th>\n",
       "      <th>CD</th>\n",
       "      <th>UC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Normal</th>\n",
       "      <td>15.6</td>\n",
       "      <td>31.2</td>\n",
       "      <td>19.5</td>\n",
       "      <td>26.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Overweight</th>\n",
       "      <td>20.0</td>\n",
       "      <td>23.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Obese</th>\n",
       "      <td>60.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>14.3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Males       Females      \n",
       "              CD    UC      CD    UC\n",
       "Normal      15.6  31.2    19.5  26.1\n",
       "Overweight  20.0  23.7     0.0  21.4\n",
       "Obese       60.0  12.5    14.3   0.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#I thought the re-indexing would change the layout of the graph into more relevant BMI order but it did not. \n",
    "df.reindex(['Normal', 'Overweight', 'Obese'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Individuals Inflamed at Diagnosis (%)')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Inflam_plot = df.plot.bar(title = \"Frequency of Inflammation in Two IBD Conditions\",  \n",
    "                     color = ['blue', 'navy', 'red', 'maroon'])\n",
    "Inflam_plot.set_xlabel('BMI', fontsize = 14)\n",
    "Inflam_plot.set_ylabel('Individuals Inflamed at Diagnosis (%)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
